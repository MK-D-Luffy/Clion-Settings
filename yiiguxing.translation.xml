<application>
  <component name="AppStorage">
    <histories>
      <item value="Mapped Statements collection already contains value for" />
      <item value="It's likely that neither a Result Type nor a Result Map was specified." />
      <item value="discriminator" />
      <item value="Invalid bound statement (not found)" />
      <item value="if (!file.exists()) { FileWriter fw = new FileWriter(file, true); for (int i = 0; i &lt; 100; i++) { int i1 = new Random().nextInt(10000); fw.write(i1+&quot; &quot;); } }" />
      <item value="type Aliases" />
      <item value="Conversion Pattern" />
      <item value="Flushes batch statements and commits database connection. * Note that database connection will not be committed if no updates/deletes/inserts were called." />
      <item value="Flushes batch statements and commits database connection." />
      <item value="Mapper interface class" />
      <item value="Retrieves a mapper." />
      <item value="Exception In Initializer Error" />
      <item value="Malformed Byte Sequence Exception" />
      <item value="Process terminated" />
      <item value="Persistence Exception" />
      <item value="* Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License." />
      <item value="Clinton Begin" />
      <item value="A repository of &quot;shared secrets&quot;, which are a mechanism for calling implementation-private methods in another package without using reflection. A package-private class implements a public interface and provides the ability to call package-private methods within that package; the object implementing that interface is provided through a third package to which access is restricted. This framework avoids the primary disadvantage of using reflection for this purpose, namely the loss of compile-time checking." />
      <item value="* The random number generator used by this class to create random * based UUIDs. In a holder class to defer initialization until needed." />
      <item value="Explicit serialVersionUID for interoperability." />
      <item value="timestamp" />
      <item value="Class [Triangle1] must declare a single constructor" />
      <item value="Precondition Violation Exception" />
      <item value="&lt;dependency&gt;--&gt; &lt;!-- &lt;groupId&gt;org.example&lt;/groupId&gt;--&gt; &lt;!-- &lt;artifactId&gt;untitled2&lt;/artifactId&gt;--&gt; &lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;--&gt; &lt;!-- &lt;exclusions&gt;--&gt; &lt;!-- &lt;exclusion&gt;--&gt; &lt;!-- &lt;groupId&gt;log4j&lt;/groupId&gt;--&gt; &lt;!-- &lt;artifactId&gt;log4j&lt;/artifactId&gt;--&gt; &lt;!-- &lt;/exclusion&gt;--&gt; &lt;!-- &lt;/exclusions&gt;--&gt; &lt;!-- &lt;/dependency&gt;--&gt;" />
      <item value="Get an attribute value from the first matched element that has the attribute. @param attributeKey The attribute key. @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string." />
      <item value="/** * Returns the index within this string of the first occurrence of the * specified substring. * * &lt;p&gt;The returned index is the smallest value {@code k} for which: * &lt;pre&gt;{@code * this.startsWith(str, k) * }&lt;/pre&gt; * If no such value of {@code k} exists, then {@code -1} is returned. * * @param str the substring to search for. * @return the index of the first occurrence of the specified substring, * or {@code -1} if there is no such occurrence. */" />
      <item value="Scheme" />
      <item value="get Context Path" />
      <item value="stock" />
      <item value="set Max Inactive Interval" />
      <item value="invalidate" />
      <item value="// Dump array back into list // instead of using a raw type here, it's possible to capture // the wildcard but it will require a call to a supplementary // private method" />
      <item value="Invocation Target Exception" />
      <item value="field Name" />
      <item value="field" />
      <item value="is Form Field" />
      <item value="* Wrap the &lt;code&gt;ResultSet&lt;/code&gt; in a decorator before processing it. * This implementation returns the &lt;code&gt;ResultSet&lt;/code&gt; it is given * without any decoration." />
      <item value="Wrap the &lt;code&gt;ResultSet&lt;/code&gt; in a decorator before processing it. * This implementation returns the &lt;code&gt;ResultSet&lt;/code&gt; it is given * without any decoration." />
      <item value="* Fill the &lt;code&gt;PreparedStatement&lt;/code&gt; replacement parameters with * the given objects." />
      <item value="Returns a string representation of the &quot;deep contents&quot; of the specified * array. If the array contains other arrays as elements, the string * representation contains their contents and so on. This method is * designed for converting multidimensional arrays to strings." />
      <item value="a the array whose string representation to return" />
      <item value="the array whose string representation to return" />
      <item value="Generic Servlet" />
      <item value="WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by org.dom4j.io.SAXContentHandler (file:/C:/Users/Administrator/IdeaProjects/Javaweb/05_XML/libs/dom4j-1.6.1.jar) to method com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser$LocatorProxy.getEncoding() WARNING: Please consider reporting this to the maintainers of org.dom4j.io.SAXContentHandler WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release" />
      <item value="Sibling" />
      <item value="Minimal Elements" />
      <item value="extension.ParameterResolutionException: No ParameterResolver registered for parameter [int arg0] in constructor [HomeWorkTest5$MyInteger(int)]." />
      <item value="An array of query replacement parameters. Each row in * this array is one set of batch replacement values." />
      <item value="* Execute a batch of SQL INSERT, UPDATE, or DELETE queries. * * @param conn The Connection to use to run the query. The caller is * responsible for closing this Connection. * @param sql The SQL to execute. * @param params An array of query replacement parameters. Each row in * this array is one set of batch replacement values. * @return The number of rows updated per statement. * @throws SQLException if a database access error occurs * @since DbUtils 1.1" />
      <item value="Can not call newInstance() on the Class for java.lang.Class" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="100" />
        <entry key="ENGLISH" value="101" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="AMHARIC" value="1" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="KAZAKH" value="1" />
        <entry key="ROMANIAN" value="2" />
        <entry key="MALAGASY" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="IGBO" value="1" />
        <entry key="VIETNAMESE" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>