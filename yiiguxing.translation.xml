<application>
  <component name="AppStorage">
    <histories>
      <item value="Concurrent Hash Map" />
      <item value="Caller Sensitive" />
      <item value="Invocation Handler" />
      <item value="mapper Registry" />
      <item value="Error Context" />
      <item value="plugin" />
      <item value="plugin All" />
      <item value="wrap" />
      <item value="interceptor Chain" />
      <item value="hierarchy" />
      <item value="hierachy" />
      <item value="build Statement From Context" />
      <item value="parse Pending" />
      <item value="parse Pending Result Maps" />
      <item value="apply Current Namespace" />
      <item value="add Mapped Statement" />
      <item value="builder Assistant" />
      <item value="Assistant" />
      <item value="add Incomplete Statement" />
      <item value="configuration Element" />
      <item value="A mapper element may only specify a url, resource or class, but not more than one." />
      <item value="is Resource Loaded" />
      <item value="eval Node" />
      <item value="statement" />
      <item value="statement Parser" />
      <item value=": java.lang.IllegalAccessError: superclass access check failed: class com.sun.javafx.scene.control.ControlHelp" />
      <item value="set Rotate" />
      <item value="Duration.INDEFINITE" />
      <item value="INDEFINITE" />
      <item value="Duration" />
      <item value="indefinite" />
      <item value="number to be scaled by a power of two." />
      <item value="scalb" />
      <item value="* Returns the value of the given calendar field. This method does * not involve normalization or validation of the field value. *" />
      <item value="* Fills in any unset fields in the calendar fields. First, the {@link * #computeTime()} method is called if the time value (millisecond offset * from the &lt;a href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;) has not been calculated from * calendar field values. Then, the {@link #computeFields()} method is * called to calculate all calendar field values." />
      <item value="Gregorian Calendar" />
      <item value="endar" />
      <item value="Gregorian" />
      <item value="Orientation" />
      <item value="Transaction Isolation Level" />
      <item value="Criterion" />
      <item value="update By Example" />
      <item value="insert Selective" />
      <item value="mbggenerated" />
      <item value="This element is automatically generated by MyBatis Generator, do not modify." />
      <item value="Mapped Statements collection already contains value for" />
      <item value="It's likely that neither a Result Type nor a Result Map was specified." />
      <item value="discriminator" />
      <item value="Invalid bound statement (not found)" />
      <item value="if (!file.exists()) { FileWriter fw = new FileWriter(file, true); for (int i = 0; i &lt; 100; i++) { int i1 = new Random().nextInt(10000); fw.write(i1+&quot; &quot;); } }" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="148" />
        <entry key="ENGLISH" value="149" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="AMHARIC" value="1" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="KAZAKH" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="MALAGASY" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="IGBO" value="1" />
        <entry key="VIETNAMESE" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>