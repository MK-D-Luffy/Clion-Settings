<application>
  <component name="AppStorage">
    <histories>
      <item value="Duration.INDEFINITE" />
      <item value="INDEFINITE" />
      <item value="Duration" />
      <item value="indefinite" />
      <item value="number to be scaled by a power of two." />
      <item value="scalb" />
      <item value="* Returns the value of the given calendar field. This method does * not involve normalization or validation of the field value. *" />
      <item value="* Fills in any unset fields in the calendar fields. First, the {@link * #computeTime()} method is called if the time value (millisecond offset * from the &lt;a href=&quot;#Epoch&quot;&gt;Epoch&lt;/a&gt;) has not been calculated from * calendar field values. Then, the {@link #computeFields()} method is * called to calculate all calendar field values." />
      <item value="Gregorian Calendar" />
      <item value="endar" />
      <item value="Gregorian" />
      <item value="Orientation" />
      <item value="Transaction Isolation Level" />
      <item value="Criterion" />
      <item value="update By Example" />
      <item value="insert Selective" />
      <item value="mbggenerated" />
      <item value="This element is automatically generated by MyBatis Generator, do not modify." />
      <item value="Mapped Statements collection already contains value for" />
      <item value="It's likely that neither a Result Type nor a Result Map was specified." />
      <item value="discriminator" />
      <item value="Invalid bound statement (not found)" />
      <item value="if (!file.exists()) { FileWriter fw = new FileWriter(file, true); for (int i = 0; i &lt; 100; i++) { int i1 = new Random().nextInt(10000); fw.write(i1+&quot; &quot;); } }" />
      <item value="type Aliases" />
      <item value="Conversion Pattern" />
      <item value="Flushes batch statements and commits database connection. * Note that database connection will not be committed if no updates/deletes/inserts were called." />
      <item value="Flushes batch statements and commits database connection." />
      <item value="Mapper interface class" />
      <item value="Retrieves a mapper." />
      <item value="Exception In Initializer Error" />
      <item value="Malformed Byte Sequence Exception" />
      <item value="Process terminated" />
      <item value="Persistence Exception" />
      <item value="* Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License." />
      <item value="Clinton Begin" />
      <item value="A repository of &quot;shared secrets&quot;, which are a mechanism for calling implementation-private methods in another package without using reflection. A package-private class implements a public interface and provides the ability to call package-private methods within that package; the object implementing that interface is provided through a third package to which access is restricted. This framework avoids the primary disadvantage of using reflection for this purpose, namely the loss of compile-time checking." />
      <item value="* The random number generator used by this class to create random * based UUIDs. In a holder class to defer initialization until needed." />
      <item value="Explicit serialVersionUID for interoperability." />
      <item value="timestamp" />
      <item value="Class [Triangle1] must declare a single constructor" />
      <item value="Precondition Violation Exception" />
      <item value="&lt;dependency&gt;--&gt; &lt;!-- &lt;groupId&gt;org.example&lt;/groupId&gt;--&gt; &lt;!-- &lt;artifactId&gt;untitled2&lt;/artifactId&gt;--&gt; &lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;--&gt; &lt;!-- &lt;exclusions&gt;--&gt; &lt;!-- &lt;exclusion&gt;--&gt; &lt;!-- &lt;groupId&gt;log4j&lt;/groupId&gt;--&gt; &lt;!-- &lt;artifactId&gt;log4j&lt;/artifactId&gt;--&gt; &lt;!-- &lt;/exclusion&gt;--&gt; &lt;!-- &lt;/exclusions&gt;--&gt; &lt;!-- &lt;/dependency&gt;--&gt;" />
      <item value="Get an attribute value from the first matched element that has the attribute. @param attributeKey The attribute key. @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true), or if the no elements have the attribute, returns empty string." />
      <item value="/** * Returns the index within this string of the first occurrence of the * specified substring. * * &lt;p&gt;The returned index is the smallest value {@code k} for which: * &lt;pre&gt;{@code * this.startsWith(str, k) * }&lt;/pre&gt; * If no such value of {@code k} exists, then {@code -1} is returned. * * @param str the substring to search for. * @return the index of the first occurrence of the specified substring, * or {@code -1} if there is no such occurrence. */" />
      <item value="Scheme" />
      <item value="get Context Path" />
      <item value="stock" />
      <item value="set Max Inactive Interval" />
      <item value="invalidate" />
      <item value="// Dump array back into list // instead of using a raw type here, it's possible to capture // the wildcard but it will require a call to a supplementary // private method" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="118" />
        <entry key="ENGLISH" value="119" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="AMHARIC" value="1" />
        <entry key="ESTONIAN" value="1" />
        <entry key="BULGARIAN" value="1" />
        <entry key="ICELANDIC" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="KAZAKH" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="MALAGASY" value="1" />
        <entry key="MARATHI" value="1" />
        <entry key="IGBO" value="1" />
        <entry key="VIETNAMESE" value="4" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>